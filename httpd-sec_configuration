-----------------------------------------------------------------------
#######    Vulnerability Tutorial - Apache ETag vulnerability ########
-----------------------------------------------------------------------		
 	
 	Created: 10/02/09	 	 	(BROWN light)	 
	Impact	
A remote attacker could determine inode numbers on the server.	
	Background	
Apache is a web server which runs on Unix, Linux, Mac OS and Windows systems.
Apache supports the ETag (Entity Tag) HTTP header, which is typically a function of the file attributes of the requested web page. The ETag is used to determine whether cached content has changed.

An inode is a data structure on a Unix or Linux file system that stores basic information about a file, such as the size, modification date, and owner. Each inode is identified by an inode number.

	The Problem	
CVE 2003-1418
The ETag header generated by Apache web servers allows the client to determine the inode number of the requested file. This could provide an attacker with information which could help launch further attacks.	
	Resolution	
Use the FileETag directive to remove the INode component from the calculation of the ETag. For example, place the following line in the Apache configuration file to calculate the ETag based only on the file's modification time and size:
FileETag None

By removing the ETag header, you disable caches and browsers from being able to validate files, so they are forced to rely on your Cache-Control and Expires header. Basically you can remove If-Modified-Since and If-None-Match requests and their 304 Not Modified Responses.
Entity tags (ETags) are a mechanism to check for a newer version of a cached file. 
Please don't turn off ETags and Last-Modified headers for your .html files, leave one of them ON. (I use Last-Modified for .html).

----------------------------------------------------------------------
#######  Protect binary and configuration directory permission #######
----------------------------------------------------------------------

By default, permission for binary and configuration is 755 that mean any user on server can view the configuration. You can disallow other user to get into conf and bin folder.

Implementation:

Go to $Web_Server directory
Change permission of bin and conf folder
 # chmod –R 750 bin conf

----------------------------------------------------------------------
####### System Settings Protection ###################################
----------------------------------------------------------------------

In default installation, users can override apache configuration using .htaccess. if you want to stop users changing your apache server settings, you can add AllowOverride to None as shown below. This must be done at root level.

Implementation:

Go to $Web_Server/conf directory
 Open httpd.conf using vi
 Search for Directory at root level
<Directory /> 
Options -Indexes 
AllowOverride None
</Directory>
 Save the httpd.conf
 Restart Apache
 
 
----------------------------------------------------------------------
####### Disable Trace HTTP Request ##################################
----------------------------------------------------------------------

By default Trace method is enabled in Apache web server. Having this enabled can allow Cross Site Tracing attack and potentially giving an option to hacker to steal cookie information. Let’s see how it looks like in default configuration.

 Do a telnet web server IP with listen port
 Make a TRACE request as shown below
#telnet localhost 80 
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
TRACE / HTTP/1.1 Host: test
HTTP/1.1 200 OK
Date: Sat, 31 Aug 2013 02:13:24 GMT
Server: Apache
Transfer-Encoding: chunked
Content-Type: message/http 20
TRACE / HTTP/1.1
Host: test 0
Connection closed by foreign host.
#
As you could see in above TRACE request it has responded my query. Let’s disable it and test it.

Implementation:

 Go to $Web_Server/conf directory
Add following directive and save the httpd.conf
 TraceEnable off
 Restart apache
Verification:

Do a telnet web server IP with listen port and make a TRACE request as shown below
#telnet localhost 80
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
TRACE / HTTP/1.1 Host: test
HTTP/1.1 405 Method Not Allowed
Date: Sat, 31 Aug 2013 02:18:27 GMT
Server: Apache Allow:
Content-Length: 223
Content-Type: text/html; charset=iso-8859-1 <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"> <html><head> <title>405 Method Not Allowed</title> </head><body> <h1>Method Not Allowed</h1>
<p>The requested method TRACE is not allowed for the URL /.</p> </body></html>
Connection closed by foreign host.
#
As you could see in above TRACE request it has blocked my request with HTTP 405 Method Not Allowed. Now, this web server doesn’t allow TRACE request and help in blocking Cross Site Tracing attack.

------------------------------------------------------------------------
############### Set cookie with HttpOnly and Secure flag ###############
------------------------------------------------------------------------

You can mitigate most of the common Cross Site Scripting attack using HttpOnly and Secure flag in cookie. Without having HttpOnly and Secure, it is possible to steal or manipulate web application session and cookies and it’s dangerous.

Implementation:

 Ensure mod_headers.so is enabled in your httpd.conf
 Go to $Web_Server/conf directory
 Add following directive and save the httpd.conf
 Header edit Set-Cookie ^(.*)$ $1;HttpOnly;Secure
 Restart apache
Verification:

Open Firefox and access your application
Check HTTP response headers in firebug, you should see Set-Cookie is flagged with HttpOnly and Secure as shown below.
